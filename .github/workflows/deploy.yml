name: üöÄ Deploy RDS MySQL 8

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read

jobs:
  terraform:
    name: Deploy AWS RDS
    runs-on: ubuntu-latest

    steps:
      - name: üëÖ Checkout do C√≥digo
        uses: actions/checkout@v4

      - name: üîë Configurar Credenciais AWS (For√ßando Perfil Default)
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "aws_session_token=${{ secrets.AWS_SESSION_TOKEN }}" >> ~/.aws/credentials
          echo "[default]" > ~/.aws/config
          echo "region=${{ secrets.AWS_REGION }}" >> ~/.aws/config
          echo "output=json" >> ~/.aws/config
          chmod 600 ~/.aws/credentials ~/.aws/config

      - name: üîç Verificar Credenciais AWS
        run: |
          export AWS_PROFILE=default
          export AWS_SDK_LOAD_CONFIG=1
          aws sts get-caller-identity

      - name: üè¢ Verificar Subnet Group e Security Group
        run: |
          export AWS_PROFILE=default
          export AWS_SDK_LOAD_CONFIG=1
          
          # Verifica se o Subnet Group existe
          if aws rds describe-db-subnet-groups --db-subnet-group-name "rds-subnet-group" --query "DBSubnetGroups" --output json | jq -e '.[0]' >/dev/null; then
            echo "DB Subnet Group j√° existe. Ignorando cria√ß√£o."
          else
            echo "DB Subnet Group n√£o encontrado. Terraform ir√° criar."
          fi

          # Verifica se o Security Group existe
          if aws ec2 describe-security-groups --query "SecurityGroups[?GroupName=='rds-sg']" --output json | jq -e '.[0]' >/dev/null; then
            echo "Security Group j√° existe. Ignorando cria√ß√£o."
          else
            echo "Security Group n√£o encontrado. Terraform ir√° criar."
          fi

      - name: üèãÔ∏è Instalar Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: üîÑ Inicializar Terraform
        run: |
          export AWS_PROFILE=default
          export AWS_SDK_LOAD_CONFIG=1
          cd terraform
          terraform init

      - name: ‚úÖ Aplicar Terraform (Passando Vari√°veis e For√ßando Perfil Default)
        run: |
          export AWS_PROFILE=default
          export AWS_SDK_LOAD_CONFIG=1
          cd terraform
          terraform apply -auto-approve \
            -var-file="../terraform/terraform.tfvars" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" || true
